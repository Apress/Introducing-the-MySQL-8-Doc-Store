--- ./version1/mylibrary_v1.py	2018-01-06 16:49:32.000000000 -0500
+++ ./version2/mylibrary_v2.py	2018-01-06 16:50:13.000000000 -0500
@@ -1,8 +1,8 @@
 #
-# Introducing the MySQL 8 Document Store - Project1
+# Introducing the MySQL 8 Document Store - Project2
 #
 # This file contains the sample Python + Flask application for demonstrating
-# how to build a simple relational database application. Thus, it relies on
+# how to build a hybrid relational database application. Thus, it relies on
 # a database class that encapsulates the CRUD operations for a MySQL database
 # of relational tables.
 #
@@ -15,7 +15,7 @@
 from wtforms import (HiddenField, TextField, TextAreaField, SelectField,
                      SelectMultipleField, IntegerField, SubmitField)
 from wtforms.validators import Required, Length
-from database.library_v1 import Library, Author, Publisher, Book
+from database.library_v2 import Library, Publisher, Book
 
 #
 # Strings
@@ -36,7 +36,7 @@
 #
 library = Library()
 # Provide your user credentials here
-library.connect(<user>, <password>, 'localhost', 3306)
+library.connect(<user>, <password>, 'localhost', 33060)
 
 #
 # Utility functions
@@ -48,17 +48,6 @@
 #
 # Customized fields for skipping prevalidation
 #
-class NewSelectMultipleField(SelectMultipleField):
-    def pre_validate(self, form):
-        # Prevent "not a valid choice" error
-        pass
-
-    def process_formdata(self, valuelist):
-        if valuelist:
-            self.data = ",".join(valuelist)
-        else:
-            self.data = ""
-
 class NewSelectField(SelectField):
     def pre_validate(self, form):
         # Prevent "not a valid choice" error
@@ -76,19 +65,6 @@
 class ListForm(FlaskForm):
     submit = SubmitField('New')
 
-class AuthorForm(FlaskForm):
-    authorid = HiddenField('AuthorId')
-    firstname = TextField('First name', validators=[
-            Required(message=REQUIRED.format("Firstname")),
-            Length(min=1, max=64, message=RANGE.format("Firstname", 1, 64))
-        ])
-    lastname = TextField( 'Last name', validators=[
-            Required(message=REQUIRED.format("Lastname")),
-            Length(min=1, max=64, message=RANGE.format("Lastname", 1, 64))
-        ])
-    create_button = SubmitField('Add')
-    del_button = SubmitField('Delete')
-
 class PublisherForm(FlaskForm):
     publisherid = HiddenField('PublisherId')
     name = TextField('Name', validators=[
@@ -119,7 +95,7 @@
         ])
     publisher = NewSelectField('Publisher ',
                     validators=[Required(message=REQUIRED.format("Publisher"))])
-    authors = NewSelectMultipleField('Authors ',
+    authors = TextField('Authors (comma separated by LastName FirstName)',
                     validators=[Required(message=REQUIRED.format("Author"))])
     create_button = SubmitField('Add')
     del_button = SubmitField('Delete')
@@ -127,7 +103,7 @@
 
 #
 # Routing functions - the following defines the routing functions for the
-# menu including the index or "home", book, author, and publisher.
+# menu including the index or "home", book and publisher.
 # 
 
 #
@@ -160,20 +136,6 @@
         rows = library.get_books()
         return render_template("list.html", form=form, rows=rows,
                                columns=columns, kind=kind)
-    elif kind == 'author':
-        if request.method == 'POST':
-            return redirect('author')
-        # Just list the authors
-        columns = (
-            '<td style="width:100px">Lastname</td>',
-            '<td style="width:200px">Firstname</td>',
-        )
-        kind = 'author'
-        # Here, we get all authors in the database
-        author = Author(library)
-        rows = author.read()
-        return render_template("list.html", form=form, rows=rows,
-                               columns=columns, kind=kind)
     elif kind == 'publisher':
         if request.method == 'POST':
             return redirect('publisher')
@@ -193,70 +155,6 @@
         return
 
 #
-# Author
-#
-# This page allows creating and editing author records.
-#
-@app.route('/author', methods=['GET', 'POST'])
-@app.route('/author/<int:author_id>', methods=['GET', 'POST'])
-def author(author_id=None):
-    author = Author(library)
-    form = AuthorForm()
-    # Get data from the form if present
-    form_authorid = form.authorid.data
-    firstname = form.firstname.data
-    lastname = form.lastname.data
-    # If the route with the variable is called, change the create button to update
-    # then populate the form with the data from the row in the table. Otherwise,
-    # remove the delete button because this will be a new data item. 
-    if author_id:
-        form.create_button.label.text = "Update"
-        # Here, we get the data and populate the form
-        data = author.read(author_id)
-        if data == []:
-            flash("Author not found!")
-        form.authorid.data = data[0][0]
-        form.firstname.data = data[0][1]
-        form.lastname.data = data[0][2]
-    else:
-        del form.del_button
-    if request.method == 'POST':
-        # First, determine if we must create, update, or delete when form posts.
-        operation = "Create"
-        if form.create_button.data:
-            if form.create_button.label.text == "Update":
-                operation = "Update"
-        if form.del_button and form.del_button.data:
-            operation = "Delete"
-        if form.validate_on_submit():
-            # Get the data from the form here
-            if operation == "Create":
-                try:
-                    author.create(LastName=lastname, FirstName=firstname)
-                    flash("Added.")
-                    return redirect('/list/author')
-                except Exception as err:
-                    flash(err)
-            elif operation == "Update":
-                try:
-                    author.update(AuthorId=form_authorid, LastName=lastname,
-                                  FirstName=firstname)
-                    flash("Updated.")
-                    return redirect('/list/author')
-                except Exception as err:
-                    flash(err)
-            else:
-                try:
-                    author.delete(form_authorid)
-                    flash("Deleted.")
-                    return redirect('/list/author')
-                except Exception as err:
-                    flash(err)
-        else:
-            flash_errors(form)
-    return render_template("author.html", form=form)
-
-#
 # Publisher
 #
 # This page allows creating and editing publisher records.
@@ -338,7 +236,7 @@
     isbn = form.isbn.data
     title = form.title.data
     year = form.year.data
-    authorids = form.authors.data
+    author_list = form.authors.data
     publisherid = form.publisher.data
     edition = form.edition.data
     language = form.language.data
@@ -351,12 +249,6 @@
     for pub in publishers:
         publisher_list.append((pub[0], '{0}'.format(pub[1])))
     form.publisher.choices = publisher_list
-    author = Author(library)
-    authors = author.read()
-    author_list = []
-    for author in authors:
-        author_list.append((author[0],'{0}, {1}'.format(author[2], author[1])))
-    form.authors.choices = author_list
     new_note = form.new_note.data
     # If the route with the variable is called, change the create button to update
     # then populate the form with the data from the row in the table. Otherwise,
@@ -376,11 +268,7 @@
         form.edition.data = data[0][3]
         form.publisher.process_data(data[0][4])
         form.language.data = data[0][5]
-        #
-        # Here, we get the author_ids for the authors
-        #
-        author_ids = book.read_author_ids(isbn_selected)[0][0]
-        form.authors.data = set(author_ids)
+        form.authors.data = book.read_authors(isbn_selected)[0][0]
 
         # We also must retrieve the notes for the book.
         all_notes = book.read_notes(isbn_selected)
@@ -403,7 +291,7 @@
             if operation == "Create":
                 try:
                     book.create(ISBN=isbn, Title=title, Year=year,
-                                PublisherId=publisherid, Authors=authorids,
+                                PublisherId=publisherid, Authors=author_list,
                                 Edition=edition, Language=language)
                     flash("Added.")
                     return redirect('/list/book')
@@ -411,8 +299,8 @@
                     flash(err)
             elif operation == "Update":
                 try:
-                    book.update(isbn_selected, ISBN=isbn, Title=title, Year=year,
-                                PublisherId=publisherid, Authors=authorids,
+                    book.update(isbn_selected, isbn, Title=title, Year=year,
+                                PublisherId=publisherid, Authors=author_list,
                                 Edition=edition, Language=language,
                                 Note=new_note)
                     flash("Updated.")
@@ -428,7 +316,8 @@
                     flash(err)
         else:
             flash_errors(form)
-    return render_template("book.html", form=form, notes=notes)
+    return render_template("book.html", form=form, notes=notes,
+                           authors=author_list)
 
 #
 # Error handling routes
