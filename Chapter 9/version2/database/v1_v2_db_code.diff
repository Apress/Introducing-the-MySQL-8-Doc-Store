--- ./version1/database/library_v1.py	2018-01-07 15:09:09.000000000 -0500
+++ ./version2/database/library_v2.py	2018-01-07 15:09:02.000000000 -0500
@@ -1,141 +1,63 @@
 #
-# Introducing the MySQL 8 Document Store - Version 1
+# Introducing the MySQL 8 Document Store - Version 2
 #
-# This file contains classes that implement a relational database model
+# This file contains classes that implement a hybrid relational database model
 # for the MyLibrary application. Included are the basic create, read,
-# update, and delete methods for books, authors, and publishers. 
+# update, and delete methods for books and publishers. 
 #
 # Additional functions are provided for connecting to and disconnecting
 # from the MySQL server.
 #
-# Database name = library_v1
+# Database name = library_v2
 #
 # Dr. Charles Bell, 2017
 #
-import mysql.connector
+import mysqlx
 
 #
 # String constants
 #
 ALL_BOOKS = """
-    SELECT DISTINCT book.ISBN, book.ISBN, Title, publisher.Name as Publisher,
-                    Year, library_v1.get_author_names(book.ISBN) as Authors
-    FROM library_v1.books As book
-        INNER JOIN library_v1.publishers as publisher ON
-                   book.PublisherId=publisher.PublisherId
-        INNER JOIN library_v1.books_authors as book_author ON
-                   book.ISBN = book_author.ISBN
-        INNER JOIN library_v1.authors as a ON book_author.AuthorId = a.AuthorId
+    SELECT DISTINCT book.ISBN, book.ISBN, Title, PublisherId, Year,
+                    library_v2.get_author_names(book.ISBN) as Authors
+    FROM library_v2.books As book
     ORDER BY book.ISBN DESC
 """
 
-GET_LASTID = "SELECT @@last_insert_id"
-
-#
-# Author SQL Statements
-#
-INSERT_AUTHOR = """
-    INSERT INTO library_v1.authors (LastName, FirstName) VALUES ('{0}','{1}')
+GET_PUBLISHER_NAME = """
+    SELECT Name
+    FROM library_v2.publishers
+    WHERE PublisherId = {0}
 """
 
-GET_AUTHORS = "SELECT * FROM library_v1.authors {0}"
-UPDATE_AUTHOR = """
-    UPDATE library_v1.authors SET LastName = '{0}', 
-    FirstName='{1}' WHERE AuthorId = {2}
-"""
-
-DELETE_AUTHOR = """
-    DELETE FROM library_v1.authors WHERE AuthorId = {0}
-"""
+GET_LASTID = "SELECT @@last_insert_id"
 
 #
 # Publisher SQL Statements
-# 
+#
 INSERT_PUBLISHER = """
-    INSERT INTO library_v1.publishers (Name, City, URL) VALUES ('{0}','{1}','{2}')
+    INSERT INTO library_v2.publishers (Name, City, URL) VALUES ('{0}','{1}','{2}')
 """
 
-GET_PUBLISHERS = "SELECT * FROM library_v1.publishers {0}"
-UPDATE_PUBLISHER = "UPDATE library_v1.publishers SET Name = '{0}'"
-DELETE_PUBLISHER = "DELETE FROM library_v1.publishers WHERE PublisherId = {0}"
+GET_PUBLISHERS = "SELECT * FROM library_v2.publishers {0}"
+UPDATE_PUBLISHER = "UPDATE library_v2.publishers SET Name = '{0}'"
+DELETE_PUBLISHER = "DELETE FROM library_v2.publishers WHERE PublisherId = {0}"
 
 #
 # Book SQL Statements
 #
 INSERT_BOOK = """
-    INSERT INTO library_v1.books (ISBN, Title, Year, PublisherId, Edition,
-    Language) VALUES ('{0}','{1}','{2}','{3}',{4},'{5}')
-"""
-
-INSERT_BOOK_AUTHOR = """
-    INSERT INTO library_v1.books_authors (ISBN, AuthorId) VALUES ('{0}', {1})
+    INSERT INTO library_v2.books (ISBN, Title, Year, PublisherId, Edition,
+    Language, Authors) VALUES ('{0}','{1}','{2}','{3}',{4},'{5}','{6}')
 """
 
-INSERT_NOTE = "INSERT INTO library_v1.notes (ISBN, Note) VALUES ('{0}','{1}')"
-GET_BOOKS = "SELECT * FROM library_v1.books {0}"
-GET_NOTES = "SELECT * FROM library_v1.notes WHERE ISBN = '{0}'"
-GET_AUTHOR_IDS = "SELECT library_v1.get_author_ids('{0}')"
-UPDATE_BOOK = "UPDATE library_v1.books SET ISBN = '{0}'"
-DELETE_BOOK = "DELETE FROM library_v1.books WHERE ISBN = '{0}'"
-DELETE_BOOK_AUTHOR = "DELETE FROM library_v1.books_authors WHERE ISBN = '{0}'"
-DELETE_NOTES = "DELETE FROM library_v1.notes WHERE ISBN = '{0}'"
-
-
-#
-# Authors table simple abstraction (relational database)
-#
-class Author(object):
-    """Author class
-    
-    This class encapsulates the authors table permitting CRUD operations
-    on the data.
-    """
-    def __init__(self, library):
-        self.library = library
-
-    def create(self, LastName, FirstName):
-        assert LastName, "You must supply a LastName for a new author."
-        assert FirstName, "You must supply a FirstName for a new author."
-        query_str = INSERT_AUTHOR
-        last_id = None
-        try:
-            self.library.sql(query_str.format(LastName, FirstName))
-            last_id = self.library.sql(GET_LASTID)
-            self.library.sql("COMMIT")
-        except Exception as err:
-            print("ERROR: Cannot add author: {0}".format(err))
-        return last_id
-    
-    def read(self, AuthorId=None):
-        query_str = GET_AUTHORS
-        if not AuthorId:
-            # return all authors
-            query_str = query_str.format("")
-        else:
-            # return specific author
-            query_str = query_str.format("WHERE AuthorId = '{0}'".format(AuthorId))
-        return self.library.sql(query_str)            
-        
-    def update(self, AuthorId, LastName, FirstName):
-        assert AuthorId, "You must supply an AuthorId to update the author."
-        assert LastName, "You must supply a LastName for the author."
-        assert FirstName, "You must supply a FirstName for the author."
-        query_str = UPDATE_AUTHOR
-        try:
-            self.library.sql(query_str.format(LastName, FirstName, AuthorId))
-            self.library.sql("COMMIT")
-        except Exception as err:
-            print("ERROR: Cannot update author: {0}".format(err))
-    
-    def delete(self, AuthorId):
-        assert AuthorId, "You must supply an AuthorId to delete the author."
-        query_str = DELETE_AUTHOR.format(AuthorId)
-        try:
-            self.library.sql(query_str)
-            self.library.sql("COMMIT")
-        except Exception as err:
-            print("ERROR: Cannot delete author: {0}".format(err))
-
+INSERT_NOTE = "INSERT INTO library_v2.notes (ISBN, Note) VALUES ('{0}','{1}')"
+GET_BOOKS = "SELECT * FROM library_v2.books {0}"
+GET_NOTES = "SELECT * FROM library_v2.notes WHERE ISBN = '{0}'"
+GET_AUTHOR_NAMES = "SELECT library_v2.get_author_names('{0}')"
+UPDATE_BOOK = "UPDATE library_v2.books SET ISBN = '{0}'"
+DELETE_NOTES = "DELETE FROM library_v2.notes WHERE ISBN = '{0}'"
+DELETE_BOOK = "DELETE FROM library_v2.books WHERE ISBN = '{0}'"
 
 #
 # Publishers table simple abstraction (relational database)
@@ -154,9 +76,10 @@
         query_str = INSERT_PUBLISHER
         last_id = None
         try:
-            self.library.sql(query_str.format(Name, City, URL))
-            last_id = self.library.sql(GET_LASTID)
-            self.library.sql("COMMIT")
+            self.library.sql(query_str.format(Name, City, URL)).execute()
+            last_id = self.library.make_rows(
+                self.library.sql(GET_LASTID).execute())[0][0]
+            self.library.sql("COMMIT").execute()
         except Exception as err:
             print("ERROR: Cannot add publisher: {0}".format(err))
         return last_id
@@ -170,7 +93,8 @@
             # return specific author
             query_str = query_str.format(
                 "WHERE PublisherId = '{0}'".format(PublisherId))
-        return self.library.sql(query_str)            
+        sql_stmt = self.library.sql(query_str)
+        return self.library.make_rows(sql_stmt.execute())           
         
     def update(self, PublisherId, Name, City=None, URL=None):
         assert PublisherId, "You must supply a publisher to update the author."
@@ -181,8 +105,8 @@
             query_str = query_str + ", URL = '{0}'".format(URL)
         query_str = query_str + " WHERE PublisherId = {0}".format(PublisherId)
         try:
-            self.library.sql(query_str)
-            self.library.sql("COMMIT")
+            self.library.sql(query_str).execute()
+            self.library.sql("COMMIT").execute()
         except Exception as err:
             print("ERROR: Cannot update publisher: {0}".format(err))
     
@@ -190,11 +114,11 @@
         assert PublisherId, "You must supply a publisher to delete the publisher."
         query_str = DELETE_PUBLISHER.format(PublisherId)
         try:
-            self.library.sql(query_str)
-            self.library.sql("COMMIT")
+            self.library.sql(query_str).execute()
+            self.library.sql("COMMIT").execute()
         except Exception as err:
             print("ERROR: Cannot delete publisher: {0}".format(err))
-     
+    
 
 #
 # Books table simple abstraction (relational database)
@@ -207,30 +131,42 @@
     """
     def __init__(self, library):
         self.library = library
+        
+    def make_authors_json(self, author_list=None):
+        from json import JSONEncoder
+        
+        if not author_list:
+            return None
+        author_dict = {"authors":[]}
+        authors = author_list.split(",")
+        for author in authors:
+            try:
+                last, first = author.strip(' ').split(' ')
+            except Exception as err:
+                last = author.strip(' ')
+                first = ''
+            author_dict["authors"].append({"LastName":last,"FirstName":first})
+        author_json = JSONEncoder().encode(author_dict)
+        return author_json
 
     def create(self, ISBN, Title, Year, PublisherId, Authors=[], Edition=1,
                Language='English'):
         assert ISBN, "You must supply an ISBN for a new book."
         assert Title, "You must supply Title for a new book."
         assert Year, "You must supply a Year for a new book."
-        assert PublisherId, "You must supply a PublisherId for a new book."
-        assert Authors, "You must supply at least one AuthorId for a new book."
+        assert PublisherId, "You must supply a publisher for a new book."
+        assert Authors, "You must supply at least one Author for a new book."
+        query_str = INSERT_BOOK
         last_id = ISBN
-        #
-        # We must do this as a transaction to ensure all tables are updated.
-        #
         try:
-            self.library.sql("START TRANSACTION")
-            query_str = INSERT_BOOK.format(ISBN, Title, Year, PublisherId,
-                                           Edition, Language)
-            self.library.sql(query_str)
-            query_str = INSERT_BOOK_AUTHOR
-            for AuthorId in Authors.split(","):
-                self.library.sql(query_str.format(ISBN, AuthorId))
-            self.library.sql("COMMIT")
+            author_json = self.make_authors_json(Authors)
+            self.library.sql(query_str.format(ISBN, Title, Year, PublisherId,
+                                              Edition, Language,
+                                              author_json)).execute()
+            self.library.sql("COMMIT").execute()
         except Exception as err:
             print("ERROR: Cannot add book: {0}".format(err))
-            self.library.sql("ROLLBACK")
+            self.library.sql("ROLLBACK").execute()
         return last_id
     
     def read(self, ISBN=None):
@@ -241,7 +177,8 @@
         else:
             # return specific author
             query_str = query_str.format("WHERE ISBN = '{0}'".format(ISBN))
-        return self.library.sql(query_str)
+        sql_stmt = self.library.sql(query_str)
+        return self.library.make_rows(sql_stmt.execute())           
     
     #
     # Get the notes for this book
@@ -249,15 +186,17 @@
     def read_notes(self, ISBN):
         assert ISBN, "You must supply an ISBN to get the notes."
         query_str = GET_NOTES.format(ISBN)
-        return self.library.sql(query_str)
+        sql_stmt = self.library.sql(query_str)
+        return self.library.make_rows(sql_stmt.execute())           
     
     #
-    # Get the author ids for this book
+    # Get the authors for this book
     #
-    def read_author_ids(self, ISBN):
+    def read_authors(self, ISBN):
         assert ISBN, "You must supply an ISBN to get the list of author ids."
-        query_str = GET_AUTHOR_IDS.format(ISBN)
-        return self.library.sql(query_str)
+        query_str = GET_AUTHOR_NAMES.format(ISBN)
+        sql_stmt = self.library.sql(query_str)
+        return self.library.make_rows(sql_stmt.execute())           
 
     def update(self, old_isbn, ISBN, Title=None, Year=None, PublisherId=None,
                Authors=None, Edition=None, Language=None, Note=None):
@@ -275,30 +214,22 @@
             book_query_str += ", PublisherId = {0}".format(PublisherId)
         if Edition:
             book_query_str += ", Edition = {0}".format(Edition)
+        if Authors:
+            author_json = self.make_authors_json(Authors)
+            book_query_str += ", Authors = '{0}'".format(author_json) 
         book_query_str += " WHERE ISBN = '{0}'".format(old_isbn)
         #
         # We must do this as a transaction to ensure all tables are updated.
         #
         try:
-            self.library.sql("START TRANSACTION")
-            #
-            # If the ISBN changes, we must remove the author ids first to
-            # avoid the foreign key constraint error.
-            #
-            if old_isbn != ISBN:
-                self.library.sql(DELETE_BOOK_AUTHOR.format(old_isbn))
-            self.library.sql(book_query_str)
-            last_id = self.library.sql(GET_LASTID)
-            if Authors:
-                query_str = INSERT_BOOK_AUTHOR
-                for AuthorId in Authors:
-                    self.library.sql(query_str.format(ISBN,AuthorId))
+            self.library.sql("START TRANSACTION").execute()
+            self.library.sql(book_query_str).execute()
             if Note:
                 self.add_note(ISBN, Note)
-            self.library.sql("COMMIT")
+            self.library.sql("COMMIT").execute()
         except Exception as err:
             print("ERROR: Cannot update book: {0}".format(err))
-            self.library.sql("ROLLBACK")
+            self.library.sql("ROLLBACK").execute()
         return last_id
 
     def delete(self, ISBN):
@@ -308,17 +239,15 @@
         # We must do this as a transaction to ensure all tables are updated.
         #
         try:
-            self.library.sql("START TRANSACTION")
+            self.library.sql("START TRANSACTION").execute()
             query_str = DELETE_NOTES.format(ISBN)
-            self.library.sql(query_str)
-            query_str = DELETE_BOOK_AUTHOR.format(ISBN)
-            self.library.sql(query_str)
+            self.library.sql(query_str).execute()
             query_str = DELETE_BOOK.format(ISBN)
-            self.library.sql(query_str)
-            self.library.sql("COMMIT")
+            self.library.sql(query_str).execute()
+            self.library.sql("COMMIT").execute()
         except Exception as err:
             print("ERROR: Cannot delete book: {0}".format(err))
-            self.library.sql("ROLLBACK")
+            self.library.sql("ROLLBACK").execute()
 
     #
     # Add a note for this book
@@ -328,11 +257,11 @@
         assert Note, "You must supply text (Note) to add a note for the book."
         query_str = INSERT_NOTE.format(ISBN, Note)
         try:
-            self.library.sql(query_str)
-            self.library.sql("COMMIT")
+            self.library.sql(query_str).execute()
+            self.library.sql("COMMIT").execute()
         except Exception as err:
-            print("ERROR: Cannot add publisher: {0}".format(err))
-    
+            print("ERROR: Cannot add note: {0}".format(err))
+
     
 #
 # Library database simple abstraction (relational database)
@@ -341,11 +270,11 @@
     """Library master class
     
     Use this class to interface with the library database. It includes
-    utility functions for connections to the server as well as running
-    queries.
+    utility functions for connections to the server and returning a
+    SQLStatement object.
     """
     def __init__(self):
-        self.db_conn = None
+        self.session = None
     
     #
     # Utility functions
@@ -357,89 +286,77 @@
     # Attempts to connect to the server as specified by the connection
     # parameters.
     # 
-    def connect(self, username, passwd, host, port, db=None):
+    def connect(self, username, passwd, host, port):
         config = {
             'user': username,
             'password': passwd,
             'host': host,
             'port': port,
-            'database': db,
         }
         try:
-            self.db_conn = mysql.connector.connect(**config)
-        except mysql.connector.Error as err:
+            self.session = mysqlx.get_session(**config)
+        except Exception as err:
             print("CONNECTION ERROR:", err)
-            self.db_conn = None
+            self.session = None
             raise
             
     #
-    # Return the connection for use in other classes
+    # Return the session for use in other classes
     #
-    def get_connection(self):
-        return self.db_conn
+    def get_session(self):
+        return self.session
     
     #
     # Check to see if connected to the server
     #
     def is_connected(self):
-        return (self.db_conn and (self.db_conn.is_connected()))
+        return (self.session and (self.session.is_open()))
     
     #
     # Disconnect from the server
     #
     def disconnect(self):
         try:
-            self.db_conn.disconnect()
+            self.session.close()
         except:
             pass
-
+        
     #
-    # Execute a query and return any results
+    # Get an SQLStatement object
     #
-    # query_str[in]      The query to execute
-    # fetch          Execute the fetch as part of the operation and
-    #                use a buffered cursor (default is True)
-    # buffered       If True, use a buffered raw cursor (default is False)
+    def sql(self, query_str):
+        return self.session.sql(query_str)
+        
     #
-    # Returns result set or cursor
-    # 
-    def sql(self, query_str, fetch=True, buffered=False):
-        # If we are fetching all, we need to use a buffered
-        if fetch:
-            cur = self.db_conn.cursor(buffered=True)
-        else:
-            cur = self.db_conn.cursor(raw=True)
-
-        try:
-            cur.execute(query_str)
-        except Exception as err:
-            cur.close()
-            print("Query error. Command: {0}:{1}".format(query_str, err))
-            raise
-
-        # Fetch rows (only if available or fetch = True).
-        if cur.with_rows:
-            if fetch:
-                try:
-                    results = cur.fetchall()
-                except mysql.connector.Error as err:
-                    print("Error fetching all query data: {0}".format(err))
-                    raise
-                finally:
-                    cur.close()
-                return results
-            else:
-                # Return cursor to fetch rows elsewhere (fetch = false).
-                return cur
-        else:
-            return cur
-
+    #  Build row array
+    #
+    #  Here, we cheat a bit and give an option to substitute the publisher name
+    #  for publisher Id column.
+    #
+    def make_rows(self, sql_res, get_publisher=False):
+        cols = []
+        for col in sql_res.columns:
+            cols.append(col.get_column_name())
+        rows = []
+        for row in sql_res.fetch_all():
+            row_item = []
+            for col in cols:
+                if get_publisher and (col == 'PublisherId'):
+                    query_str = GET_PUBLISHER_NAME.format(row.get_string(col))
+                    name = self.session.sql(query_str).execute().fetch_one()[0]
+                    row_item.append("{0}".format(name))
+                else:                    
+                    row_item.append("{0}".format(row.get_string(col)))
+            rows.append(row_item)
+        return rows
+    
     #
     # Get list of books
     #
     def get_books(self):
         try:
-            results = self.sql(ALL_BOOKS)
+            sql_stmt = self.sql(ALL_BOOKS)
+            results = self.make_rows(sql_stmt.execute(), True) 
         except Exception as err:
             print("ERROR: {0}".format(err))
             raise
