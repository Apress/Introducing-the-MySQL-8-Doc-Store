--- ./version2/mylibrary_v2.py	2018-01-12 15:46:31.000000000 -0500
+++ ./version3/mylibrary_v3.py	2018-01-12 15:45:32.000000000 -0500
@@ -1,10 +1,9 @@
 #
-# Introducing the MySQL 8 Document Store - Version 2
+# Introducing the MySQL 8 Document Store - Version 3
 #
 # This file contains the sample Python + Flask application for demonstrating
-# how to build a hybrid relational database application. Thus, it relies on
-# a database class that encapsulates the CRUD operations for a MySQL database
-# of relational tables.
+# how to build a document store application. Thus, it relies on a document
+# class that encapsulates the CRUD operations for a MySQL collection.
 #
 # Dr. Charles Bell, 2017
 #
@@ -12,10 +11,10 @@
 from flask_script import Manager
 from flask_bootstrap import Bootstrap
 from flask_wtf import FlaskForm
-from wtforms import (HiddenField, TextField, TextAreaField, SelectField,
-                     SelectMultipleField, IntegerField, SubmitField)
+from wtforms import (HiddenField, TextField, TextAreaField,
+                     IntegerField, SubmitField)
 from wtforms.validators import Required, Length
-from database.library_v2 import Library, Publisher, Book
+from database.library_v3 import Books
 
 #
 # Strings
@@ -32,11 +31,11 @@
 bootstrap = Bootstrap(app)
 
 #
-# Setup the library database class
+# Setup the books document store class
 #
-library = Library()
+books = Books()
 # Provide your user credentials here
-library.connect(<user>, <password>, 'localhost', 33060)
+books.connect(<user>, <password>, 'localhost', 33060)
 
 #
 # Utility functions
@@ -46,39 +45,11 @@
         flash("{0} : {1}".format(error, ",".join(form.errors[error])))
 
 #
-# Customized fields for skipping prevalidation
-#
-class NewSelectField(SelectField):
-    def pre_validate(self, form):
-        # Prevent "not a valid choice" error
-        pass
-
-    def process_formdata(self, valuelist):
-        if valuelist:
-            self.data = ",".join(valuelist)
-        else:
-            self.data = ""
-
-#
 # Form classes - the forms for the application
 #
 class ListForm(FlaskForm):
     submit = SubmitField('New')
 
-class PublisherForm(FlaskForm):
-    publisherid = HiddenField('PublisherId')
-    name = TextField('Name', validators=[
-            Required(message=REQUIRED.format("Name")),
-            Length(min=1, max=128, message=RANGE.format("Name", 1, 128))
-        ])
-    city = TextField('City', validators=[
-            Required(message=REQUIRED.format("City")),
-            Length(min=1, max=32, message=RANGE.format("City", 1, 32))
-        ])
-    url = TextField('URL/Website')
-    create_button = SubmitField('Add')
-    del_button = SubmitField('Delete')
-
 class BookForm(FlaskForm):
     isbn = TextField('ISBN ', validators=[
             Required(message=REQUIRED.format("ISBN")),
@@ -93,17 +64,27 @@
             Required(message=REQUIRED.format("Language")),
             Length(min=1, max=24, message=RANGE.format("Language", 1, 24))
         ])
-    publisher = NewSelectField('Publisher ',
-                    validators=[Required(message=REQUIRED.format("Publisher"))])
+    pub_name = TextField('Publisher Name', validators=[
+            Required(message=REQUIRED.format("Name")),
+            Length(min=1, max=128, message=RANGE.format("Name", 1, 128))
+        ])
+    pub_city = TextField('Publisher City', validators=[
+            Required(message=REQUIRED.format("City")),
+            Length(min=1, max=32, message=RANGE.format("City", 1, 32))
+        ])
+    pub_url = TextField('Publisher URL/Website')
     authors = TextField('Authors (comma separated by LastName FirstName)',
-                    validators=[Required(message=REQUIRED.format("Author"))])
+                        validators=[Required(message=REQUIRED.format("Author"))])
     create_button = SubmitField('Add')
     del_button = SubmitField('Delete')
     new_note = TextAreaField('Add Note')
+    # Here, we book id for faster updates
+    book_id = HiddenField("BookId")
+    # Here, we store the book data structure (document)
+    book_dict = HiddenField("BookData")
 
 #
-# Routing functions - the following defines the routing functions for the
-# menu including the index or "home", book and publisher.
+# Routing functions - the following defines the routing functions for the menu.
 #
 
 #
@@ -133,21 +114,7 @@
         )
         kind = 'book'
         # Here, we get all books in the database
-        rows = library.get_books()
-        return render_template("list.html", form=form, rows=rows,
-                               columns=columns, kind=kind)
-    elif kind == 'publisher':
-        if request.method == 'POST':
-            return redirect('publisher')
-        columns = (
-            '<td style="width:300px">Name</td>',
-            '<td style="width:100px">City</td>',
-            '<td style="width:300px">URL/Website</td>',
-        )
-        kind = 'publisher'
-        # Here, we get all publishers in the database
-        publisher = Publisher(library)
-        rows = publisher.read()
+        rows = books.get_books()
         return render_template("list.html", form=form, rows=rows,
                                columns=columns, kind=kind)
     else:
@@ -155,126 +122,83 @@
         return
 
 #
-# Publisher
-#
-# This page allows creating and editing publisher records.
-#
-@app.route('/publisher', methods=['GET', 'POST'])
-@app.route('/publisher/<int:publisher_id>', methods=['GET', 'POST'])
-def publisher(publisher_id=None):
-    publisher = Publisher(library)
-    form = PublisherForm()
-    # Get data from the form if present
-    form_publisherid = form.publisherid.data
-    name = form.name.data
-    city = form.city.data
-    url = form.url.data
-    # If the route with the variable is called, change the create button to update
-    # then populate the form with the data from the row in the table. Otherwise,
-    # remove the delete button because this will be a new data item.
-    if publisher_id:
-        # Here, we get the data and populate the form
-        form.create_button.label.text = "Update"
-        # Here, we get the data and populate the form
-        data = publisher.read(publisher_id)
-        if data == []:
-            flash("Publisher not found!")
-        form.publisherid.data = data[0][0]
-        form.name.data = data[0][1]
-        form.city.data = data[0][2]
-        form.url.data = data[0][3]
-    else:
-        del form.del_button
-    if request.method == 'POST':
-        # First, determine if we must create, update, or delete when form posts.
-        operation = "Create"
-        if form.create_button.data:
-            if form.create_button.label.text == "Update":
-                operation = "Update"
-        if form.del_button and form.del_button.data:
-            operation = "Delete"
-        if form.validate_on_submit():
-            # Get the data from the form here
-            if operation == "Create":
-                try:
-                    publisher.create(Name=name, City=city, URL=url)
-                    flash("Added.")
-                    return redirect('/list/publisher')
-                except Exception as err:
-                    flash(err)
-            elif operation == "Update":
-                try:
-                    publisher.update(PublisherId=form_publisherid, Name=name,
-                                     City=city, URL=url)
-                    flash("Updated.")
-                    return redirect('/list/publisher')
-                except Exception as err:
-                    flash(err)
-            else:
-                try:
-                    publisher.delete(form_publisherid)
-                    flash("Deleted.")
-                    return redirect('/list/publisher')
-                except Exception as err:
-                    flash(err)
-        else:
-            flash_errors(form)
-    return render_template("publisher.html", form=form)
-
-#
 # Book
 #
-# This page allows creating and editing book records.
+# This page allows creating and editing book documents.
 #
 @app.route('/book', methods=['GET', 'POST'])
-@app.route('/book/<string:isbn_selected>', methods=['GET', 'POST'])
-def book(isbn_selected=None):
-    notes = None
-    book = Book(library)
+@app.route('/book/<string:id_selected>', methods=['GET', 'POST'])
+def book(id_selected=None):
+    notes = []
     form = BookForm()
     # Get data from the form if present
+    bookid = form.book_id.data
     isbn = form.isbn.data
     title = form.title.data
     year = form.year.data
     author_list = form.authors.data
-    publisherid = form.publisher.data
+    pub_name = form.pub_name.data
+    pub_city = form.pub_city.data
+    pub_url = form.pub_url.data
     edition = form.edition.data
     language = form.language.data
-    #
-    # Here, we get the choices for the select lists
-    #
-    publisher = Publisher(library)
-    publishers = publisher.read()
-    publisher_list = []
-    for pub in publishers:
-        publisher_list.append((pub[0], '{0}'.format(pub[1])))
-    form.publisher.choices = publisher_list
     new_note = form.new_note.data
     # If the route with the variable is called, change the create button to update
     # then populate the form with the data from the row in the table. Otherwise,
     # remove the delete button because this will be a new data item.
-    if isbn_selected:
+    if id_selected:
         # Here, we get the data and populate the form
-        data = book.read(isbn_selected)
+        data = books.read(id_selected)
         if data == []:
             flash("Book not found!")
 
         #
         # Here, we populate the data
         #
-        form.isbn.data = data[0][0]
-        form.title.data = data[0][1]
-        form.year.data = data[0][2]
-        form.edition.data = data[0][3]
-        form.publisher.process_data(data[0][4])
-        form.language.data = data[0][5]
-        form.authors.data = book.read_authors(isbn_selected)[0][0]
+        form.book_dict.data = data;
+        form.book_id.data = data["_id"]
+        form.isbn.data = data["ISBN"]
+        form.title.data = data["Title"]
+        form.year.data = data["Pub_Year"]
+        #
+        # Since edition is optional, we must check for it first.
+        #
+        if "Edition" in data.keys():
+            form.edition.data = data["Edition"]
+        else:
+            form.edition.data = '1'
+        form.pub_name.data = data["Publisher"]["Name"]
+        #
+        # Since publisher city is optional, we must check for it first.
+        #
+        if "City" in data["Publisher"].keys():
+            form.pub_city.data = data["Publisher"]["City"]
+        else:
+            form.pub_city = ""
+        #
+        # Since publisher URL is optional, we must check for it first.
+        #
+        if "URL" in data["Publisher"].keys():
+            form.pub_url.data = data["Publisher"]["URL"]
+        else:
+            form.pub_url.data = ""
+        #
+        # Since language is optional, we must check for it first.
+        #
+        if "Language" in data.keys():
+            form.language.data = data["Language"]
+        else:
+            form.language.data = "English"
+        form.authors.data = books.make_authors_str(data["Authors"])
 
         # We also must retrieve the notes for the book.
-        all_notes = book.read_notes(isbn_selected)
+        if "Notes" in data.keys():
+            all_notes = data["Notes"]
+        else:
+            all_notes = []
         notes = []
         for note in all_notes:
-            notes.append(note[2])
+            notes.append(note["Text"])
         form.create_button.label.text = "Update"
     else:
         del form.del_button
@@ -290,26 +214,29 @@
             # Get the data from the form here
             if operation == "Create":
                 try:
-                    book.create(ISBN=isbn, Title=title, Year=year,
-                                PublisherId=publisherid, Authors=author_list,
-                                Edition=edition, Language=language)
+                    books.create(ISBN=isbn, Title=title, Pub_Year=year,
+                                 Pub_Name=pub_name, Pub_City=pub_city,
+                                 Pub_URL=pub_url, Authors=author_list,
+                                 Notes=notes, Edition=edition,
+                                 Language=language)
                     flash("Added.")
                     return redirect('/list/book')
                 except Exception as err:
                     flash(err)
             elif operation == "Update":
                 try:
-                    book.update(isbn_selected, isbn, Title=title, Year=year,
-                                PublisherId=publisherid, Authors=author_list,
-                                Edition=edition, Language=language,
-                                Note=new_note)
+                    books.update(id_selected, form.book_dict.data, ISBN=isbn,
+                                 Title=title, Pub_Year=year, Pub_Name=pub_name,
+                                 Pub_City=pub_city, Pub_URL=pub_url,
+                                 Authors=author_list, Edition=edition,
+                                 Language=language, New_Note=new_note)
                     flash("Updated.")
                     return redirect('/list/book')
                 except Exception as err:
                     flash(err)
             else:
                 try:
-                    book.delete(isbn)
+                    books.delete(form.book_id.data)
                     flash("Deleted.")
                     return redirect('/list/book')
                 except Exception as err:
